daskhub:
  # daskhub Helm chart values.
  # This config is based off of the approach used by the Pangeo cloud deployments
  # (https://github.com/pangeo-data/pangeo-cloud-federation)
  jupyterhub:
    prePuller:
      hook:
        enabled: false
      continuous:
        enabled: false
    singleuser:
      # see https://jupyterhub-kubespawner.readthedocs.io/en/latest/spawner.html for a
      # description of configuration options
      image:
        name: pangeo/pangeo-notebook
        tag: "2022.11.03"
      startTimeout: 600
      storage:
        capacity: 10Gi
        extraVolumes:
          - name: cil-scratch-bucket
            persistentVolumeClaim:
              claimName: scratch-bucket
          - name: cil-data-bucket
            persistentVolumeClaim:
              claimName: data-bucket
        extraVolumeMounts:
          - name: cil-scratch-bucket
            mountPath: /gcs/impactlab-data-scratch
          - name: cil-data-bucket
            mountPath: /gcs/impactlab-data
      cpu:
        limit: 7
        guarantee: 7
      memory:
        limit: 45G
        guarantee: 45G
      cloudMetadata:
        blockWithIptables: false
      serviceAccountName: jhubuser
      extraEnv:
        CIL_SCRATCH_PREFIX: "gs://impactlab-data-scratch"
        CIL_SCRATCH_BUCKET: "impactlab-data-scratch"
      profileList:
        - display_name: "pangeo/pangeo-notebook:2022.11.03"
          kubespawner_override:
            image: pangeo/pangeo-notebook:2022.11.03
    hub:
      resources:
        requests:
          cpu: "0.25"
          memory: 0.5Gi
        limits:
          cpu: "1.25"
          memory: 1Gi
      config:
        Authenticator:
          admin_users:
            - delgadom
        JupyterHub:
          admin_access: true
          authenticator_class: github
        GitHubOAuthenticator:
          oauth_callback_url: "https://notebooks.cilresearch.org/hub/oauth_callback"
          allowed_organizations:
            - ClimateImpactLab
        OAuthenticator:
          scope:
            - read:user
      extraConfig:
        # Register Dask Gateway service and setup singleuser environment.
        00-add-dask-gateway-values: |
          # 1. Sets `DASK_GATEWAY__PROXY_ADDRESS` in the singleuser environment.
          # 2. Adds the URL for the Dask Gateway JupyterHub service.
          import os

          # These are set by jupyterhub.
          release_name = os.environ["HELM_RELEASE_NAME"]
          release_namespace = os.environ["POD_NAMESPACE"]

          # Adds Dask Gateway as a JupyterHub service to make the gateway available at
          # {HUB_URL}/services/dask-gateway
          service_url = "http://traefik-{}-dask-gateway.{}".format(release_name, release_namespace)
          for service in c.JupyterHub.services:
              if service["name"] == "dask-gateway":
                  if not service.get("url", None):
                      print("Adding dask-gateway service URL")
                      service.setdefault("url", service_url)
                  break
          else:
              print("dask-gateway service not found. Did you set jupyterhub.hub.services.dask-gateway.apiToken?")

          # Setting gateway address to send API traffic directly to dask-gateway traefik, rather than going through 
          # jupyterhub proxy. This is recommended when traffic only comes from within the k8s cluster.
          gateway_address = service_url + "/services/dask-gateway"
          print("Setting DASK_GATEWAY__ADDRESS {}".format(gateway_address))

          # Internal address to connect to the Dask Gateway.
          c.KubeSpawner.environment.setdefault("DASK_GATEWAY__ADDRESS", gateway_address)
          # Internal address for the Dask Gateway proxy.
          c.KubeSpawner.environment.setdefault("DASK_GATEWAY__PROXY_ADDRESS", "gateway://traefik-{}-dask-gateway.{}:80".format(release_name, release_namespace))
          # Relative address for the dashboard link.
          c.KubeSpawner.environment.setdefault("DASK_GATEWAY__PUBLIC_ADDRESS", "/services/dask-gateway/")
          # Use JupyterHub to authenticate with Dask Gateway.
          c.KubeSpawner.environment.setdefault("DASK_GATEWAY__AUTH__TYPE", "jupyterhub")
    scheduling:
      userScheduler:
        enabled: true
      userPlaceholder:
        enabled: false
      userPods:
        nodeAffinity:
          matchNodePurpose: require
      corePods:
        nodeAffinity:
          matchNodePurpose: require
    cull:
      timeout: 259200

    proxy:
      https:
        enabled: true
        type: secret
        secret:
          name: jhub-com-tls
        hosts:
          - "notebooks.cilresearch.org"

  dask-gateway:
    gateway:
      backend:
        worker:
          extraPodConfig:
            serviceAccount: "jhubuser"
            serviceAccountName: "jhubuser"
            volumes:
              - name: cil-scratch-bucket
                persistentVolumeClaim:
                  claimName: scratch-bucket
              - name: cil-data-bucket
                persistentVolumeClaim:
                  claimName: data-bucket
            affinity:
              nodeAffinity:
                requiredDuringSchedulingIgnoredDuringExecution:
                  nodeSelectorTerms:
                    - matchExpressions:
                        - key: iam.gke.io/gke-metadata-server-enabled
                          operator: In
                          values:
                            - "true"
          extraContainerConfig:
            volumeMounts:
              - name: cil-scratch-bucket
                mountPath: /gcs/impactlab-data-scratch
              - name: cil-data-bucket
                mountPath: /gcs/impactlab-data
